from typing import TYPE_CHECKING, Optional

from sqlalchemy import Boolean, Float, ForeignKey, Integer, String, Text
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.models.base import BaseModel

if TYPE_CHECKING:
    from app.models.finding import Finding


class Vulnerability(BaseModel):
    """Vulnerability model for detailed CVE and remediation information."""
    
    __tablename__ = "vulnerabilities"
    
    # Foreign key
    finding_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey("findings.id", ondelete="CASCADE"),
        nullable=False,
        unique=True,
        index=True,
    )
    
    # CVE information
    cve_id: Mapped[Optional[str]] = mapped_column(String(50), nullable=True, index=True)
    cwe_id: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)
    
    # CVSS scoring
    cvss_version: Mapped[Optional[str]] = mapped_column(String(10), nullable=True)
    cvss_vector: Mapped[Optional[str]] = mapped_column(String(200), nullable=True)
    cvss_base_score: Mapped[Optional[float]] = mapped_column(Float, nullable=True)
    cvss_temporal_score: Mapped[Optional[float]] = mapped_column(Float, nullable=True)
    cvss_environmental_score: Mapped[Optional[float]] = mapped_column(Float, nullable=True)
    
    # Exploitability
    exploit_available: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    exploit_maturity: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)
    
    # Remediation
    remediation_summary: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    remediation_steps: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    patch_available: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    patch_url: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
    workaround: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    
    # References
    references: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # JSON string of URLs
    
    # Affected components
    affected_component: Mapped[Optional[str]] = mapped_column(String(200), nullable=True)
    affected_versions: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
    fixed_versions: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
    
    # Relationship
    finding: Mapped["Finding"] = relationship(
        "Finding",
        back_populates="vulnerability",
        lazy="joined",
    )
    
    @property
    def effective_cvss_score(self) -> Optional[float]:
        """Get the most relevant CVSS score."""
        return (
            self.cvss_environmental_score
            or self.cvss_temporal_score
            or self.cvss_base_score
        )
    
    def __repr__(self) -> str:
        return f"<Vulnerability(id={self.id}, cve_id='{self.cve_id}', cvss_base_score={self.cvss_base_score})>"