from typing import List, Optional

from pydantic import Field, HttpUrl

from app.schemas.base import BaseSchema, IdTimestampSchema


class VulnerabilityBaseSchema(BaseSchema):
    """Base schema for vulnerability."""
    
    cve_id: Optional[str] = Field(None, pattern=r"^CVE-\d{4}-\d{4,}$", description="CVE identifier")
    cwe_id: Optional[str] = Field(None, pattern=r"^CWE-\d+$", description="CWE identifier")
    
    # CVSS scoring
    cvss_version: Optional[str] = Field(None, max_length=10)
    cvss_vector: Optional[str] = Field(None, max_length=200)
    cvss_base_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    cvss_temporal_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    cvss_environmental_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    
    # Exploitability
    exploit_available: bool = False
    exploit_maturity: Optional[str] = Field(None, max_length=50)
    
    # Remediation
    remediation_summary: Optional[str] = None
    remediation_steps: Optional[str] = None
    patch_available: bool = False
    patch_url: Optional[HttpUrl] = None
    workaround: Optional[str] = None
    
    # References
    references: Optional[List[HttpUrl]] = Field(default_factory=list)
    
    # Affected components
    affected_component: Optional[str] = Field(None, max_length=200)
    affected_versions: Optional[str] = Field(None, max_length=500)
    fixed_versions: Optional[str] = Field(None, max_length=500)


class VulnerabilityCreateRequest(VulnerabilityBaseSchema):
    """Request schema for creating a vulnerability."""
    
    finding_id: int = Field(..., description="Associated finding ID")


class VulnerabilityUpdateRequest(VulnerabilityBaseSchema):
    """Request schema for updating a vulnerability."""
    pass


class VulnerabilityResponse(VulnerabilityBaseSchema, IdTimestampSchema):
    """Response schema for vulnerability."""
    
    finding_id: int
    
    # Computed field
    effective_cvss_score: Optional[float] = Field(None, description="Most relevant CVSS score")


class RemediationAdvice(BaseSchema):
    """Schema for remediation advice."""
    
    priority: str = Field(..., description="Remediation priority (critical, high, medium, low)")
    summary: str = Field(..., description="Brief summary of the remediation")
    steps: List[str] = Field(..., description="Step-by-step remediation instructions")
    effort_estimate: Optional[str] = Field(None, description="Estimated effort (e.g., '2-4 hours')")
    prerequisites: Optional[List[str]] = Field(default_factory=list, description="Prerequisites for remediation")
    references: Optional[List[HttpUrl]] = Field(default_factory=list, description="Reference URLs")